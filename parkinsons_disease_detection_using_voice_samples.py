# -*- coding: utf-8 -*-
"""Parkinsons Disease Detection using voice samples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dhe6DjRkOFoYweX853i6nQS1mpv6Gr-h

IMPORT
"""



import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection

"""

parkinsons_data = pd.read_csv('/content/parkinsons.csv')

parkinsons_data.head()

# number of rows and columns in the dataframe
parkinsons_data.shape

parkinsons_data.info()

# checking for missing values in each column
parkinsons_data.isnull().sum()

# HELPS UNDERSTAND WHAT IT IS
parkinsons_data.describe()

"""1 - 147 ---- Parkinson's
0 - 48  ---- Healthy
"""

parkinsons_data['status'].value_counts()

# grouping the data bas3ed on the target variable
# Helps show the difference between people who are healthy vs who have parkinson's
parkinsons_data.groupby('status').mean()

"""Seprating the features and Target --- using the averages and means provied by data analysising"""

# To remove name because it doesn't matter
X = parkinsons_data.drop(columns=['name','status'], axis=1)
# Putting the status in a new variable
Y = parkinsons_data['status']

print(X)

print(Y)

"""Spiliting data to training and test --- Check the accuracy of the model """

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Data Strandarization"""

scaler = StandardScaler()
# Fit all the data --  Understand the data and not change the meaning of the data
scaler.fit(X_train)

# convert all the values to the same scale
#The parameters generated using the fit() method are now used and applied to the training data to update them.

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""Model Training -- Support Vector machine learning model

Make a line between which can help seprate people with and without the parkinson's -- Best fit line know as hyperplane

There is also support vectors which are closest to the line for the two different data
"""

model = svm.SVC(kernel='linear')

"""Model Evaluvation"""

# training the SVM model with training data
model.fit(X_train, Y_train)

"""Training Data --- Accuracy Score"""

# accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data : ', training_data_accuracy)

"""Test Data --- Accuracy Score"""

# accuracy score on test data
X_test_prediction = model.predict(X_test)
Test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of training data : ', Test_data_accuracy)

"""Predictive System -- Using the accuracy score"""

# We can use the data to take a particular example and put the info here to predict it with a 87-88 percent accuracy
input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")